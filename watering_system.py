# -*- coding: utf-8 -*-
"""watering_system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UuW69T-fxUnvVw2aXlVDH3kFGRW8x5Si

# Model with TF
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelBinarizer
from sklearn.experimental import enable_iterative_imputer
from sklearn.impute import IterativeImputer
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix
import joblib
from sklearn.ensemble import RandomForestClassifier
from flask import Flask, jsonify, request
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

df = pd.read_csv('TARP.csv')

df = df.drop(['Time', 'Wind gust', 'Wind speed', 'Pressure', 'rainfall', 'N', 'P', 'K', 'ph'], axis =1)
df = df.sample(n=10000, random_state=42)
print(df)

encoder = LabelBinarizer()
df['Status'] = encoder.fit_transform(df['Status'])
print(df.info())

# handling missing data
imputer = IterativeImputer(random_state=46, verbose=True)
data = imputer.fit_transform(df)
data = pd.DataFrame(data, columns = df.columns)

# data normalization from 0 to 1
scaler = MinMaxScaler((-1,1))
sdf = scaler.fit_transform(data.iloc[:,:-1], data.iloc[:,-1])
scaled_df = pd.DataFrame(sdf, columns = data.iloc[:,:-1].columns)
# tidak mengubah kolom status
scaled_df['Status'] = data['Status']

plt.hist(scaled_df['Status'])

x = scaled_df.iloc[:,:-1]
y = scaled_df.iloc[:,-1]

x_train,x_test,y_train,y_test=train_test_split(x, y, test_size=0.2, random_state=7)

print('X_train shape : ',  x_train.shape)
print('y_train shape : ',  y_train.shape)
print('X_test shape : ',  x_test.shape)
print('y_test shape : ',  y_test.shape)

# define the model
model_RF = RandomForestClassifier()
model_RF.fit(x_train, y_train)
y_pred = model_RF.predict(x_test)
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print(f'Confusion Matrix: \n {confusion_matrix(y_test, y_pred)}')

data_1 = (22.0, 41.0, 56.0, 24.330292, 57.696575)
def predict_status(data):
    input_data_as_array = np.asarray(data)
    input_data_reshaped = input_data_as_array.reshape(1,-1)
    std_data = scaler.transform(input_data_reshaped)
    pred = model_RF.predict(std_data)
    status = "ON" if pred > 0.5 else "OFF"
    print(status)

predict_status(data_1)

joblib.dump(model_RF, "model.sav")

model = joblib.load('model.sav')
@app.route("/status", methods= ["POST"])
def status():
    user_input = request.get_json(force=True)
    data = user_input.get('data')
    # Convert list to tuple
    data = tuple(data)
    input_data_as_array = np.asarray(data)
    input_data_reshaped = input_data_as_array.reshape(1,-1)
    std_data = scaler.transform(input_data_reshaped)
    pred = model.predict(std_data)
    response = {
        "status": "ON" if pred > 0.5 else "OFF"
    }
    return jsonify(response)

if __name__ == '__main__':
    app.run(debug=True)